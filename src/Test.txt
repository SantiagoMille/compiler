/*
    Laboratorio de Sistemas Operativos  
    Programa3.2-10.     Cliente 
    José Daniel Enriquez Castañeda  A01169046
    Iván Gilberto Martin Enciso A01169099
*/
//Incluye las librerías 
#include <unistd.h>
#include <sys/types.h>
#include <dirent.h>
#include <string.h>
#include <stdio.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <signal.h>
#include <errno.h>
#include <fcntl.h>
#include <mqueue.h>
#include <time.h>

#define MAX_CMN_LEN 100

int main(){
    
 
    // Declaración de variables 
    time_t ticks;
    pid_t child;
    mqd_t mqp;
    struct mq_attr attr;
    int status;
    char msg[500];
    char rcv[500];

    //Declaración de atributos de la cola de mensajes 
    attr.mq_flags = 0;
    attr.mq_maxmsg = 5;
    attr.mq_msgsize = 255;
    attr.mq_curmsgs = 0;
    mqp = mq_open("/mqexample", O_CREAT|O_RDWR, 0644, &attr); //Abre la mq

    
    memset(msg,0,sizeof(msg));  // Borra msg
    memset(rcv,0,sizeof(rcv));  // Borra rcv 

    while(1){

        printf("Introduzca cualquiera de las siguiente opciones:\n\n");  // Imprime en pantalla
        printf("SEARCH: Para pedir la cantidad de archivos normales en un directorio y sus subdirectorios\n");  // Imprime en pantalla
        printf("END: Para terminar el programa\n\nCódigo introducido: ");  // Imprime en pantalla
        scanf ("%s", msg);               // Guarda lo que da el usuario en msg

        printf("sending request %s\n", msg);
        status = mq_send(mqp, msg, strlen(msg), 0);         // Manda el mensaje por mq
        sleep(1);                               // Borra y reinicializa todo 

        if(status<0){
            perror("Error cannot send message");               // Si no se manda, obtiene error y termina 
            mq_close(mqp);
            mq_unlink("/mqexample");
            exit(-1);
        }

        if (strcmp(msg,"END") == 0){ // Si el mensaje es "END" 
            status = 1;
        }    

        else if (strcmp(msg,"SEARCH") == 0){ // Si el mensaje es "SEARCH" 
            status = 2;
        }  

        else
            status = 3;

        switch(status) {

        case 1:         // CASE END 
            printf("Terminating program.\n");
            mq_close(mqp);                            // Cierra la cola 
            mq_unlink("/mqexample");
            exit(-1); 
             
        case 2:         // CASE SEARCH

            printf("receiving response\n\n");             // Recibe la respuesta 
            
            status = mq_receive(mqp, rcv, 255, NULL);  
       
            if(status<0){
                perror("Error cannot receive message");     // Si no recibe nada manda error y termina 
                mq_close(mqp);
                mq_unlink("/mqexample");
                exit(-1);
            } 

            if(strcmp(rcv,"Path?") == 0){
                memset(msg,0,sizeof(msg));              // Borra y reinicia las variables 
                memset(rcv,0,sizeof(rcv));

                printf("Introduzca el path del directorio (Cuide la sintaxis): ");  // Imprime en pantalla
                scanf ("%s", msg);               // Guarda lo que da el usuario en msg
                printf("sending request %s\n\n", msg);
                status = mq_send(mqp, msg, strlen(msg), 0);         // Manda el mensaje por mq
                if(status<0){
                    perror("Error cannot send message");               // Si no se manda, obtiene error y termina 
                    mq_close(mqp);
                    mq_unlink("/mqexample");
                    exit(-1);
                }
                sleep(1);
                
                printf("receiving response\n");             // Recibe la respuesta 
                status = mq_receive(mqp, rcv, 255, NULL);   
                if(status<0){
                    perror("Error cannot receive message");     // Si no recibe nada manda error y termina 
                    mq_close(mqp);
                    mq_unlink("/mqexample");
                    exit(-1);
                } 

                if(strcmp(rcv,"ERROR") == 0){
                    memset(msg,0,sizeof(msg));              // Borra y reinicia las variables 
                    memset(rcv,0,sizeof(rcv));
                    sleep(1);
                    status = 0;
                    break;
                }
                else{
                    printf("El número de archivos normales (DT_REG) es: %s\n\n",rcv); 
                    memset(msg,0,sizeof(msg));              // Borra y reinicia las variables 
                    memset(rcv,0,sizeof(rcv));
                    sleep(1);
                    status = 0;
                    break;
                } 
                        
            }

            
        case 3:
            status = 0;                         // Borra y reinicializa todo 
            memset(msg,0,sizeof(msg));
            memset(rcv,0,sizeof(rcv));
            printf("\nERROR Comando desconocido: %s\n\n", rcv);
            break; 

        }

    }
    mq_close(mqp);                      // Cierra la cola de mensajes y termina 
    mq_unlink("/mqexample");
    return(0);
}
